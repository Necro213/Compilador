
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 25 12:30:29 GMT-07:00 2017
//----------------------------------------------------

package Lex;

import java.io.FileReader;
import java.util.Hashtable;
import java.util.Stack;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 25 12:30:29 GMT-07:00 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\013\002\000\002\002" +
    "\010\000\002\002\005\000\002\010\003\000\002\010\003" +
    "\000\002\011\007\000\002\011\005\000\002\003\005\000" +
    "\002\003\003\000\002\004\010\000\002\004\005\000\002" +
    "\012\003\000\002\012\003\000\002\005\011\000\002\005" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\005\010\000\002\005\010\000\002\005\010\000" +
    "\002\005\010\000\002\005\010\000\002\005\010\000\002" +
    "\005\007\000\002\005\004\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\007\000\002" +
    "\006\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\003\004\025\000\001\002\000\004\036" +
    "\265\001\002\000\004\025\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\012\011\001" +
    "\002\000\004\024\012\001\002\000\004\044\013\001\002" +
    "\000\010\003\016\006\015\030\014\001\002\000\004\005" +
    "\260\001\002\000\004\036\254\001\002\000\004\036\022" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffc\001\002\000\042\003\040\006\015" +
    "\007\023\010\025\011\034\014\026\015\042\016\036\017" +
    "\033\020\035\021\032\022\027\023\037\026\031\027\043" +
    "\030\014\001\002\000\004\036\252\001\002\000\004\002" +
    "\ufff8\001\002\000\004\037\137\001\002\000\004\037\132" +
    "\001\002\000\004\037\125\001\002\000\004\002\ufff6\001" +
    "\002\000\004\037\120\001\002\000\004\037\113\001\002" +
    "\000\004\037\106\001\002\000\004\037\101\001\002\000" +
    "\004\037\074\001\002\000\004\037\067\001\002\000\004" +
    "\037\062\001\002\000\004\036\061\001\002\000\004\002" +
    "\ufffa\001\002\000\004\037\052\001\002\000\004\037\044" +
    "\001\002\000\004\040\045\001\002\000\004\036\046\001" +
    "\002\000\036\003\050\007\023\010\025\011\034\014\026" +
    "\015\042\016\036\017\033\020\035\021\032\022\027\023" +
    "\037\026\031\027\043\001\002\000\004\002\uffe8\001\002" +
    "\000\004\036\051\001\002\000\004\002\uffe7\001\002\000" +
    "\006\004\054\005\053\001\002\000\004\040\ufff5\001\002" +
    "\000\004\040\ufff4\001\002\000\004\040\056\001\002\000" +
    "\004\036\057\001\002\000\036\003\050\007\023\010\025" +
    "\011\034\014\026\015\042\016\036\017\033\020\035\021" +
    "\032\022\027\023\037\026\031\027\043\001\002\000\004" +
    "\002\ufff0\001\002\000\044\002\uffe7\003\040\006\015\007" +
    "\023\010\025\011\034\014\026\015\042\016\036\017\033" +
    "\020\035\021\032\022\027\023\037\026\031\027\043\030" +
    "\014\001\002\000\006\004\054\005\053\001\002\000\004" +
    "\040\064\001\002\000\004\036\065\001\002\000\036\003" +
    "\050\007\023\010\025\011\034\014\026\015\042\016\036" +
    "\017\033\020\035\021\032\022\027\023\037\026\031\027" +
    "\043\001\002\000\004\002\uffea\001\002\000\006\004\054" +
    "\005\053\001\002\000\004\040\071\001\002\000\004\036" +
    "\072\001\002\000\036\003\050\007\023\010\025\011\034" +
    "\014\026\015\042\016\036\017\033\020\035\021\032\022" +
    "\027\023\037\026\031\027\043\001\002\000\004\002\uffef" +
    "\001\002\000\006\004\054\005\053\001\002\000\004\040" +
    "\076\001\002\000\004\036\077\001\002\000\036\003\050" +
    "\007\023\010\025\011\034\014\026\015\042\016\036\017" +
    "\033\020\035\021\032\022\027\023\037\026\031\027\043" +
    "\001\002\000\004\002\uffed\001\002\000\006\004\054\005" +
    "\053\001\002\000\004\040\103\001\002\000\004\036\104" +
    "\001\002\000\036\003\050\007\023\010\025\011\034\014" +
    "\026\015\042\016\036\017\033\020\035\021\032\022\027" +
    "\023\037\026\031\027\043\001\002\000\004\002\ufff2\001" +
    "\002\000\006\004\054\005\053\001\002\000\004\040\110" +
    "\001\002\000\004\036\111\001\002\000\036\003\050\007" +
    "\023\010\025\011\034\014\026\015\042\016\036\017\033" +
    "\020\035\021\032\022\027\023\037\026\031\027\043\001" +
    "\002\000\004\002\uffee\001\002\000\006\004\054\005\053" +
    "\001\002\000\004\040\115\001\002\000\004\036\116\001" +
    "\002\000\036\003\050\007\023\010\025\011\034\014\026" +
    "\015\042\016\036\017\033\020\035\021\032\022\027\023" +
    "\037\026\031\027\043\001\002\000\004\002\uffec\001\002" +
    "\000\006\004\054\005\053\001\002\000\004\040\122\001" +
    "\002\000\004\036\123\001\002\000\036\003\050\007\023" +
    "\010\025\011\034\014\026\015\042\016\036\017\033\020" +
    "\035\021\032\022\027\023\037\026\031\027\043\001\002" +
    "\000\004\002\uffe9\001\002\000\006\004\054\005\053\001" +
    "\002\000\004\040\127\001\002\000\004\036\130\001\002" +
    "\000\036\003\050\007\023\010\025\011\034\014\026\015" +
    "\042\016\036\017\033\020\035\021\032\022\027\023\037" +
    "\026\031\027\043\001\002\000\004\002\uffeb\001\002\000" +
    "\006\004\054\005\053\001\002\000\004\040\134\001\002" +
    "\000\004\036\135\001\002\000\036\003\050\007\023\010" +
    "\025\011\034\014\026\015\042\016\036\017\033\020\035" +
    "\021\032\022\027\023\037\026\031\027\043\001\002\000" +
    "\004\002\ufff1\001\002\000\006\004\054\005\053\001\002" +
    "\000\004\040\141\001\002\000\004\041\142\001\002\000" +
    "\034\003\152\011\150\014\160\015\153\016\145\017\151" +
    "\020\143\021\147\022\146\023\154\026\157\027\156\042" +
    "\144\001\002\000\004\037\245\001\002\000\036\003\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb" +
    "\001\002\000\004\037\240\001\002\000\004\037\233\001" +
    "\002\000\004\037\226\001\002\000\004\037\221\001\002" +
    "\000\004\037\214\001\002\000\004\036\212\001\002\000" +
    "\004\037\205\001\002\000\004\037\200\001\002\000\036" +
    "\003\050\007\023\010\025\011\034\014\026\015\042\016" +
    "\036\017\033\020\035\021\032\022\027\023\037\026\031" +
    "\027\043\001\002\000\004\037\173\001\002\000\004\037" +
    "\166\001\002\000\004\037\161\001\002\000\006\004\054" +
    "\005\053\001\002\000\004\040\163\001\002\000\004\036" +
    "\164\001\002\000\034\003\152\011\150\014\160\015\153" +
    "\016\145\017\151\020\143\021\147\022\146\023\154\026" +
    "\157\027\156\042\144\001\002\000\036\003\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\026\uffe5\027\uffe5\001\002" +
    "\000\006\004\054\005\053\001\002\000\004\040\170\001" +
    "\002\000\004\036\171\001\002\000\034\003\152\011\150" +
    "\014\160\015\153\016\145\017\151\020\143\021\147\022" +
    "\146\023\154\026\157\027\156\042\144\001\002\000\036" +
    "\003\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd" +
    "\027\uffdd\001\002\000\004\040\174\001\002\000\004\036" +
    "\175\001\002\000\034\003\152\011\150\014\160\015\153" +
    "\016\145\017\151\020\143\021\147\022\146\023\154\026" +
    "\157\027\156\042\144\001\002\000\036\003\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\026\uffdc\027\uffdc\001\002" +
    "\000\004\002\ufff3\001\002\000\006\004\054\005\053\001" +
    "\002\000\004\040\202\001\002\000\004\036\203\001\002" +
    "\000\034\003\152\011\150\014\160\015\153\016\145\017" +
    "\151\020\143\021\147\022\146\023\154\026\157\027\156" +
    "\042\144\001\002\000\036\003\uffde\007\uffde\010\uffde\011" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\026\uffde\027\uffde\001\002\000\006\004" +
    "\054\005\053\001\002\000\004\040\207\001\002\000\004" +
    "\036\210\001\002\000\034\003\152\011\150\014\160\015" +
    "\153\016\145\017\151\020\143\021\147\022\146\023\154" +
    "\026\157\027\156\042\144\001\002\000\036\003\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\001" +
    "\002\000\034\003\152\011\150\014\160\015\153\016\145" +
    "\017\151\020\143\021\147\022\146\023\154\026\157\027" +
    "\156\042\144\001\002\000\036\003\uffda\007\uffda\010\uffda" +
    "\011\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\026\uffda\027\uffda\001\002\000\006" +
    "\004\054\005\053\001\002\000\004\040\216\001\002\000" +
    "\004\036\217\001\002\000\034\003\152\011\150\014\160" +
    "\015\153\016\145\017\151\020\143\021\147\022\146\023" +
    "\154\026\157\027\156\042\144\001\002\000\036\003\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2" +
    "\001\002\000\006\004\054\005\053\001\002\000\004\040" +
    "\223\001\002\000\004\036\224\001\002\000\034\003\152" +
    "\011\150\014\160\015\153\016\145\017\151\020\143\021" +
    "\147\022\146\023\154\026\157\027\156\042\144\001\002" +
    "\000\036\003\uffe6\007\uffe6\010\uffe6\011\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\026\uffe6\027\uffe6\001\002\000\006\004\054\005\053\001" +
    "\002\000\004\040\230\001\002\000\004\036\231\001\002" +
    "\000\034\003\152\011\150\014\160\015\153\016\145\017" +
    "\151\020\143\021\147\022\146\023\154\026\157\027\156" +
    "\042\144\001\002\000\036\003\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\026\uffe0\027\uffe0\001\002\000\006\004" +
    "\054\005\053\001\002\000\004\040\235\001\002\000\004" +
    "\036\236\001\002\000\034\003\152\011\150\014\160\015" +
    "\153\016\145\017\151\020\143\021\147\022\146\023\154" +
    "\026\157\027\156\042\144\001\002\000\036\003\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf\027\uffdf\001" +
    "\002\000\006\004\054\005\053\001\002\000\004\040\242" +
    "\001\002\000\004\036\243\001\002\000\034\003\152\011" +
    "\150\014\160\015\153\016\145\017\151\020\143\021\147" +
    "\022\146\023\154\026\157\027\156\042\144\001\002\000" +
    "\036\003\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\026" +
    "\uffe3\027\uffe3\001\002\000\006\004\054\005\053\001\002" +
    "\000\004\040\247\001\002\000\004\036\250\001\002\000" +
    "\034\003\152\011\150\014\160\015\153\016\145\017\151" +
    "\020\143\021\147\022\146\023\154\026\157\027\156\042" +
    "\144\001\002\000\036\003\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\027\uffe1\001\002\000\004\013\253" +
    "\001\002\000\004\002\ufff9\001\002\000\004\045\255\001" +
    "\002\000\004\036\256\001\002\000\036\003\050\007\023" +
    "\010\025\011\034\014\026\015\042\016\036\017\033\020" +
    "\035\021\032\022\027\023\037\026\031\027\043\001\002" +
    "\000\004\002\ufffb\001\002\000\004\033\261\001\002\000" +
    "\004\004\262\001\002\000\004\036\263\001\002\000\010" +
    "\003\016\006\015\030\014\001\002\000\004\002\ufff7\001" +
    "\002\000\010\003\016\006\015\030\014\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\005\013\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\020\010\016\011\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\040\004\020" +
    "\005\023\010\027\011\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\046\005\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\057" +
    "\005\023\001\001\000\002\001\001\000\014\003\040\004" +
    "\020\005\023\010\027\011\017\001\001\000\004\012\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\065\005\023\001\001\000\002\001\001\000\004\012\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\072\005\023\001\001\000\002\001\001\000\004\012\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\077\005\023\001\001\000\002\001\001\000\004\012\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\104\005\023\001\001\000\002\001\001\000\004\012\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\111\005\023\001\001\000\002\001\001\000\004\012\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\116\005\023\001\001\000\002\001\001\000\004\012\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\123\005\023\001\001\000\002\001\001\000\004\012\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\130\005\023\001\001\000\002\001\001\000\004\012\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\135\005\023\001\001\000\002\001\001\000\004\012\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\176\005\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\164\001\001\000\002\001\001\000\004\012\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\203\001\001\000\002\001" +
    "\001\000\004\012\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\210\001\001\000\002\001\001\000" +
    "\004\006\212\001\001\000\002\001\001\000\004\012\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\217\001\001\000\002\001\001\000\004\012\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\224\001" +
    "\001\000\002\001\001\000\004\012\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\231\001\001\000" +
    "\002\001\001\000\004\012\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\236\001\001\000\002\001" +
    "\001\000\004\012\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\243\001\001\000\002\001\001\000" +
    "\004\012\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\256\005\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\020\010\263\011\017\001\001\000\002\001\001\000" +
    "\010\004\020\010\265\011\017\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0; 
    int ifs = 0;
    int whiles = 0;
    int fors = 0;
    int switches = 0;
    int cases = 0;
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");


public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder("Error Critico "+s+" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1)+"\nRepare antes de Continuar");}}
            if(m.length()!=0)
                Interface.setError(m+"");
    }

public void syntax_error(Symbol s){
append("La Cadena en la Linea: "+(s.left+1)+ " Columna: "+(s.right+1)+" esta fuera de contexto.");
}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
append("La Cadena en la Linea: "+(s.left+1)+ " esta fuera de contexto.");
}

public static void append(String mensaje){
StringBuilder me;
    me = new StringBuilder("Error Sintactico: "+" ");
    me.append(mensaje);
    //System.out.println(me);
    Interface.setError(me.toString());
}

public static void addProduction(String prod){
    StringBuilder production;

    production = new StringBuilder("->"+prod);
    Interface.addProduction(production.toString());
}

    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
           // ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {




void print(String msj)
 
   {System.out.println(msj);}



  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque_sentencia ::= error PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque_sentencia ::= LLAVE_CERRAR 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia12");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque_sentencia ::= STAND PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia11");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque_sentencia ::= SPEED PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia10");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloque_sentencia ::= LEVEL PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia9");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque_sentencia ::= ROTATE PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia8");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloque_sentencia ::= BACKWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia7");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque_sentencia ::= FORWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia6");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque_sentencia ::= RIGHT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia5");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque_sentencia ::= LEFT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia4");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque_sentencia ::= DOWN PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia3");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque_sentencia ::= UP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia2");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentencia ::= SLEEP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia 
            {
              Lexema RESULT =null;
		Cup.addProduction("bloque_sentencia");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_sentencia",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencias ::= error PUNTO_Y_COMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencias ::= STAND PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias12");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias ::= SPEED PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias11");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias ::= LEVEL PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias10");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias ::= ROTATE PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias9");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= BACKWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias8");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= FORWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias7");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= RIGHT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias6");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencias ::= LEFT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias5");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias ::= DOWN PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias4");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias ::= UP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias3");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= SLEEP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias2");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= LOOP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR LLAVE_ABRIR bloque_sentencia bloque_codigo 
            {
              Lexema RESULT =null;
		Cup.addProduction("sentencias");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= NUMERO 
            {
              Lexema RESULT =null;
		Cup.addProduction("parametro2");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametro ::= ID 
            {
              Lexema RESULT =null;
		 Cup.addProduction("parametro1");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_variables ::= error PUNTO_Y_COMA primer_cuerpo 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("dec_variables",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_variables ::= VAR ID SIGNO_DE_ASIGNACION NUMERO PUNTO_Y_COMA primer_cuerpo 
            {
              Lexema RESULT =null;
		 Cup.addProduction("dec_variables");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("dec_variables",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_codigo ::= sentencias 
            {
              Lexema RESULT =null;
		 Cup.addProduction("bloque_codigo2");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_codigo",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_codigo ::= OFF PUNTO_Y_COMA END 
            {
              Lexema RESULT =null;
		 Cup.addProduction("bloque_codigo1");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("bloque_codigo",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias_iniciales ::= error PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias_iniciales",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias_iniciales ::= ON PUNTO_Y_COMA SYNC PUNTO_Y_COMA bloque_codigo 
            {
              Lexema RESULT =null;
		 Cup.addProduction("sentencias_iniciales");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias_iniciales",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primer_cuerpo ::= dec_variables 
            {
              Lexema RESULT =null;
		 Cup.addProduction("primer_cuerpo2");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primer_cuerpo",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primer_cuerpo ::= sentencias_iniciales 
            {
              Lexema RESULT =null;
		 Cup.addProduction("primer_cuerpo");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primer_cuerpo",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error PUNTO_Y_COMA primer_cuerpo 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= NT$0 NEW FLY PLAN PALABRA primer_cuerpo 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Lexema RESULT =null;
 Cup.addProduction("inicio");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema start_val = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

