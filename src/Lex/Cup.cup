package Lex;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.Stack;
import java_cup.runtime.*;

import java_cup.runtime.Symbol;

action code{:


void print(String msj)
 
   {System.out.println(msj);}


:}

init with{:
    vars = 0;
    :}

parser code {:

    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0; 
    int ifs = 0;
    int whiles = 0;
    int fors = 0;
    int switches = 0;
    int cases = 0;
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");


public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder("Error Critico "+s+" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1)+"\nRepare antes de Continuar");}}
            if(m.length()!=0)
                Interface.setError(m+"");
    }

public void syntax_error(Symbol s){
append("La Cadena en la Linea: "+(s.left+1)+ " Columna: "+(s.right+1)+" esta fuera de contexto.");
}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
append("La Cadena en la Linea: "+(s.left+1)+ " esta fuera de contexto.");
}

public static void append(String mensaje){
StringBuilder me;
    me = new StringBuilder("Error Sintactico: "+" ");
    me.append(mensaje);
    //System.out.println(me);
    Interface.setError(me.toString());
}

public static void addProduction(String prod){
    StringBuilder production;

    production = new StringBuilder("->"+prod);
    Interface.addProduction(production.toString());
}

    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
           // ex.printStackTrace();
        }
    }
:};




terminal Lexema  //DECLARACION DE TERMINALES

NUMERO,ID,ON,OFF,LOOP,SLEEP,FLY,END,UP,DOWN,LEFT,RIGHT,FORWARD,BACKWARD,
    ROTATE,LEVEL,PLAN,NEW,SPEED,STAND,VAR,START,CAD,SIGNO_DE_ASIGNACION,RESTA,
    COMA,PUNTO_Y_COMA,PARENTESIS_ABRIR,PARENTESIS_CERRAR,LLAVE_ABRIR,LLAVE_CERRAR,
    ERROR,PALABRA,SYNC;

non terminal Lexema //DECLACACION DE NO TERMINALES
inicio,bloque_codigo,dec_variables,sentencias,bloque_sentencia,err,primer_cuerpo,sentencias_iniciales,
parametro

;


start with inicio;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////------INICIO---------///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inicio::= {: Cup.addProduction("inicio");:} NEW FLY PLAN PALABRA primer_cuerpo
            | error PUNTO_Y_COMA primer_cuerpo;

primer_cuerpo::= sentencias_iniciales {: Cup.addProduction("primer_cuerpo");:}| 
                dec_variables {: Cup.addProduction("primer_cuerpo2");:}; 

sentencias_iniciales::=ON PUNTO_Y_COMA SYNC PUNTO_Y_COMA bloque_codigo {: Cup.addProduction("sentencias_iniciales");:}|
                        error PUNTO_Y_COMA bloque_codigo;

bloque_codigo::=  OFF PUNTO_Y_COMA END {: Cup.addProduction("bloque_codigo1");:}| 
                    sentencias {: Cup.addProduction("bloque_codigo2");:};

dec_variables::= VAR ID SIGNO_DE_ASIGNACION NUMERO PUNTO_Y_COMA primer_cuerpo {: Cup.addProduction("dec_variables");:}|
                 error PUNTO_Y_COMA primer_cuerpo;

parametro::= ID {: Cup.addProduction("parametro1");:}| NUMERO {:Cup.addProduction("parametro2");:};

sentencias::=   LOOP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR LLAVE_ABRIR bloque_sentencia bloque_codigo {:Cup.addProduction("sentencias");:}|
                SLEEP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias2");:}|
                UP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias3");:}|
                DOWN PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias4");:}|
                LEFT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias5");:}|
                RIGHT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias6");:}|
                FORWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias7");:}|
                BACKWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias8");:}|
                ROTATE PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias9");:}|
                LEVEL PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias10");:}|
                SPEED PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias11");:}|
                STAND PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_Y_COMA bloque_codigo {:Cup.addProduction("sentencias12");:}|
                error PUNTO_Y_COMA;

bloque_sentencia::= SLEEP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia");:}|
                UP PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia2");:}|
                DOWN PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia3");:}|
                LEFT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia4");:}|
                RIGHT PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia5");:}|
                FORWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia6");:}|
                BACKWARD PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia7");:}|
                ROTATE PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia8");:}|
                LEVEL PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia9");:}|
                SPEED PARENTESIS_ABRIR parametro PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia10");:}|
                STAND PARENTESIS_ABRIR PARENTESIS_CERRAR PUNTO_Y_COMA bloque_sentencia {:Cup.addProduction("bloque_sentencia11");:}| 
                LLAVE_CERRAR {:Cup.addProduction("bloque_sentencia12");:}| error PUNTO_Y_COMA bloque_sentencia
;
